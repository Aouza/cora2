import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";
import { env } from "../env";

// Configura√ß√£o da conex√£o otimizada para Vercel serverless
const connectionString = env.DATABASE_URL;

// Configura√ß√µes espec√≠ficas para ambiente serverless
const isVercel = process.env.VERCEL === "1";
const isProduction = process.env.NODE_ENV === "production";

const postgresConfig = {
  // Configura√ß√µes b√°sicas
  prepare: false, // Desabilitar prepare para evitar problemas de cache
  max: isVercel ? 1 : 10, // Pool menor no Vercel
  idle_timeout: 20, // 20 segundos de idle timeout
  connect_timeout: 10, // 10 segundos de timeout de conex√£o

  // Configura√ß√µes espec√≠ficas para Vercel
  ...(isVercel && {
    max: 1, // Pool de 1 conex√£o no Vercel
    idle_timeout: 10, // Timeout menor no Vercel
    connect_timeout: 15, // Timeout de conex√£o maior no Vercel
    ssl: "require" as const, // For√ßar SSL
  }),

  // Configura√ß√µes de retry
  onnotice: () => {}, // Silenciar notices
  onparameter: () => {}, // Silenciar parameter warnings

  // Configura√ß√µes de debug (apenas em desenvolvimento)
  ...(process.env.NODE_ENV === "development" && {
    debug: (connection: any, query: any, params: any) => {
      console.log("üîç [DB] Query:", query);
      console.log("üîç [DB] Params:", params);
    },
  }),
};

// Criar cliente postgres com configura√ß√µes otimizadas
const client = postgres(connectionString, postgresConfig);

// Inst√¢ncia do Drizzle
export const db = drizzle(client, {
  schema,
  casing: "snake_case",
  // Configura√ß√µes adicionais do Drizzle
  logger: process.env.NODE_ENV === "development",
});

// Export do client para casos especiais
export { client };

// Export dos schemas para facilitar imports
export * from "./schema";

// Fun√ß√£o para verificar sa√∫de da conex√£o
export async function checkDatabaseHealth(): Promise<boolean> {
  try {
    await client`SELECT 1`;
    return true;
  } catch (error) {
    console.error("‚ùå [DB] Health check failed:", error);
    return false;
  }
}

// Fun√ß√£o para fechar conex√µes (√∫til para cleanup)
export async function closeDatabase(): Promise<void> {
  try {
    await client.end();
    console.log("‚úÖ [DB] Database connections closed");
  } catch (error) {
    console.error("‚ùå [DB] Error closing database:", error);
  }
}
