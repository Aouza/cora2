"use client";

import { useState, useEffect, createContext, useContext } from "react";
import { User, Session } from "@supabase/supabase-js";
import { supabase } from "../../lib/supabase";

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  signIn: (provider: "google" | "facebook") => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

interface AuthProviderProps {
  children: React.ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    // Obter sess√£o inicial
    const getInitialSession = async () => {
      try {
        const {
          data: { session },
          error,
        } = await supabase.auth.getSession();

        if (!mounted) return;

        if (error) {
          console.error("‚ùå Erro ao obter sess√£o:", error);
          setLoading(false);
          return;
        }

        console.log("üîç Sess√£o inicial obtida:", {
          hasSession: !!session,
          hasUser: !!session?.user,
        });

        setSession(session);
        setUser(session?.user ?? null);
        setLoading(false);
      } catch (error) {
        console.error("‚ùå Erro cr√≠tico ao obter sess√£o:", error);
        if (mounted) {
          setLoading(false);
        }
      }
    };

    getInitialSession();

    // Escutar mudan√ßas de autentica√ß√£o
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!mounted) return;

      console.log("üîÑ Auth state changed:", event, {
        hasSession: !!session,
        hasUser: !!session?.user,
      });

      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);

      // Criar/atualizar perfil do usu√°rio quando fizer login
      if (event === "SIGNED_IN" && session?.user) {
        try {
          const { error } = await supabase.from("profiles").upsert({
            id: session.user.id,
            email: session.user.email!,
            full_name:
              session.user.user_metadata.full_name ||
              session.user.user_metadata.name ||
              null,
            avatar_url: session.user.user_metadata.avatar_url || null,
            updated_at: new Date().toISOString(),
          });

          if (error) {
            console.error("‚ùå Erro ao salvar perfil:", error);
          } else {
            console.log("‚úÖ Perfil salvo com sucesso no Supabase");
          }
        } catch (error) {
          console.error("‚ùå Erro ao sincronizar perfil:", error);
        }
      }

      // Log quando o usu√°rio faz logout
      if (event === "SIGNED_OUT") {
        console.log("‚úÖ Usu√°rio deslogado com sucesso");
      }
    });

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []);

  const signIn = async (provider: "google" | "facebook") => {
    try {
      console.log("üîÑ Iniciando login com", provider);
      console.log(
        "üîó Redirect URL ser√°:",
        `${window.location.origin}/auth/callback`
      );

      const { error } = await supabase.auth.signInWithOAuth({
        provider,
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
          scopes:
            provider === "google"
              ? "openid email profile https://www.googleapis.com/auth/userinfo.profile"
              : undefined,
          queryParams:
            provider === "google"
              ? {
                  access_type: "offline",
                  prompt: "consent",
                }
              : undefined,
        },
      });

      if (error) {
        console.error("‚ùå Erro no signInWithOAuth:", error);
        throw error;
      }

      console.log("‚úÖ SignInWithOAuth executado, redirecionando...");
    } catch (error) {
      console.error("‚ùå Error signing in:", error);
      throw error;
    }
  };

  const signOut = async () => {
    try {
      console.log("üîÑ Iniciando logout...");

      // Verificar se h√° sess√£o antes de tentar logout
      const {
        data: { session: currentSession },
      } = await supabase.auth.getSession();

      if (currentSession) {
        // Se h√° sess√£o, fazer logout normal
        console.log("üì§ Sess√£o encontrada, fazendo logout...");
        const { error } = await supabase.auth.signOut({ scope: "global" });

        if (error) {
          // Se o erro for de sess√£o faltando, n√£o √© cr√≠tico
          if (
            error.message?.includes("Auth session missing") ||
            error.message?.includes("session missing")
          ) {
            console.log("‚ö†Ô∏è Sess√£o j√° expirada, limpando estado local");
          } else {
            console.error("‚ùå Erro no signOut:", error);
            throw error;
          }
        }
      } else {
        console.log(
          "‚ö†Ô∏è Nenhuma sess√£o ativa encontrada, limpando estado local"
        );
      }

      console.log("‚úÖ SignOut executado com sucesso");

      // Sempre limpar estado local, independente do resultado do logout
      setUser(null);
      setSession(null);

      // Limpar qualquer storage local do Supabase
      if (typeof window !== "undefined") {
        localStorage.removeItem("supabase.auth.token");
        sessionStorage.removeItem("supabase.auth.token");
      }
    } catch (error) {
      console.error("‚ùå Erro inesperado no logout:", error);

      // Mesmo com erro, limpar estado local para garantir logout
      console.log("üßπ Limpando estado local mesmo com erro");
      setUser(null);
      setSession(null);

      // N√£o fazer throw do erro para n√£o bloquear o logout
      // O usu√°rio deve conseguir sair mesmo se houver erro no servidor
    }
  };

  const contextValue: AuthContextType = {
    user,
    session,
    loading,
    signIn,
    signOut,
  };

  return (
    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
  );
}
